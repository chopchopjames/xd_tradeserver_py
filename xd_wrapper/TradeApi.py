# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TradeApi
else:
    import _TradeApi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class TradeSpi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def OnOrderReport(self, confirm: "OrderInfo") -> "void":
        return _TradeApi.TradeSpi_OnOrderReport(self, confirm)

    def OnTradeReport(self, fill: "TradeInfo") -> "void":
        return _TradeApi.TradeSpi_OnTradeReport(self, fill)

    def OnQueryPosition(self, pos_info: "PositionInfo", request_id: "std::string", is_last: "bool") -> "void":
        return _TradeApi.TradeSpi_OnQueryPosition(self, pos_info, request_id, is_last)

    def OnQueryAsset(self, asset_info: "AssetInfo", request_id: "std::string", is_last: "bool") -> "void":
        return _TradeApi.TradeSpi_OnQueryAsset(self, asset_info, request_id, is_last)

    def OnQueryOrder(self, order_info: "OrderInfo", request_id: "std::string", is_last: "bool") -> "void":
        return _TradeApi.TradeSpi_OnQueryOrder(self, order_info, request_id, is_last)

    def OnQueryTrade(self, trade_info: "TradeInfo", request_id: "std::string", is_last: "bool") -> "void":
        return _TradeApi.TradeSpi_OnQueryTrade(self, trade_info, request_id, is_last)

    def OnQuotData(self, quot_data: "QuotationData") -> "void":
        return _TradeApi.TradeSpi_OnQuotData(self, quot_data)

    def OnQuotDeal(self, quot_deal: "QuotationDeal") -> "void":
        return _TradeApi.TradeSpi_OnQuotDeal(self, quot_deal)

    def OnQuotOrder(self, quot_order: "QuotationOrder") -> "void":
        return _TradeApi.TradeSpi_OnQuotOrder(self, quot_order)

    def OnQuotStatic(self, static_data: "StaticData", request_id: "std::string", is_last: "bool") -> "void":
        return _TradeApi.TradeSpi_OnQuotStatic(self, static_data, request_id, is_last)

    def __init__(self):
        if self.__class__ == TradeSpi:
            _self = None
        else:
            _self = self
        _TradeApi.TradeSpi_swiginit(self, _TradeApi.new_TradeSpi(_self, ))
    __swig_destroy__ = _TradeApi.delete_TradeSpi
    def __disown__(self):
        self.this.disown()
        _TradeApi.disown_TradeSpi(self)
        return weakref.proxy(self)

# Register TradeSpi in _TradeApi:
_TradeApi.TradeSpi_swigregister(TradeSpi)

class TradeApi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _TradeApi.TradeApi_swiginit(self, _TradeApi.new_TradeApi())
    __swig_destroy__ = _TradeApi.delete_TradeApi

    def RegisterSpi(self, spi: "TradeSpi") -> "void":
        return _TradeApi.TradeApi_RegisterSpi(self, spi)

    def LoginTrade(self, connReq: "ConnRequest", request: "LoginRequest") -> "ITG::MsgResponse":
        return _TradeApi.TradeApi_LoginTrade(self, connReq, request)

    def LoginQuot(self, connReq: "ConnRequest", request: "LoginRequest") -> "ITG::MsgResponse":
        return _TradeApi.TradeApi_LoginQuot(self, connReq, request)

    def PlaceOrder(self, order: "LimitOrderRequest") -> "int":
        return _TradeApi.TradeApi_PlaceOrder(self, order)

    def CancelOrder(self, order_id: "std::string") -> "int":
        return _TradeApi.TradeApi_CancelOrder(self, order_id)

    def QueryAsset(self, request_id: "std::string") -> "int":
        return _TradeApi.TradeApi_QueryAsset(self, request_id)

    def QueryPosition(self, request_id: "std::string") -> "int":
        return _TradeApi.TradeApi_QueryPosition(self, request_id)

    def QueryOrder(self, request_id: "std::string") -> "int":
        return _TradeApi.TradeApi_QueryOrder(self, request_id)

    def QueryTrade(self, request_id: "std::string") -> "int":
        return _TradeApi.TradeApi_QueryTrade(self, request_id)

    def QueryStaticDatas(self) -> "int":
        return _TradeApi.TradeApi_QueryStaticDatas(self)

    def SubscribeTicker(self, symbol: "std::string", type: "int") -> "int":
        return _TradeApi.TradeApi_SubscribeTicker(self, symbol, type)
    m_spi = property(_TradeApi.TradeApi_m_spi_get, _TradeApi.TradeApi_m_spi_set)

# Register TradeApi in _TradeApi:
_TradeApi.TradeApi_swigregister(TradeApi)

ITG_SUCCESS = _TradeApi.ITG_SUCCESS
ITG_ERR_NETWORK = _TradeApi.ITG_ERR_NETWORK
ITG_ERR_UNKNOWN = _TradeApi.ITG_ERR_UNKNOWN
PENDING = _TradeApi.PENDING
ACK = _TradeApi.ACK
REJECTED = _TradeApi.REJECTED
CONFIRMED = _TradeApi.CONFIRMED
CANCELLED = _TradeApi.CANCELLED
PARTIAL_FILLED = _TradeApi.PARTIAL_FILLED
ALL_FILLED = _TradeApi.ALL_FILLED
CANCEL_PENDING = _TradeApi.CANCEL_PENDING
FILLCNL_PENDING = _TradeApi.FILLCNL_PENDING
FILLCNL_END = _TradeApi.FILLCNL_END
ERROR_STU = _TradeApi.ERROR_STU
NORMAL_BUY = _TradeApi.NORMAL_BUY
NORMAL_SELL = _TradeApi.NORMAL_SELL
SSE = _TradeApi.SSE
SZE = _TradeApi.SZE
OTH = _TradeApi.OTH
class ConnRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ser_type = property(_TradeApi.ConnRequest_ser_type_get, _TradeApi.ConnRequest_ser_type_set)
    ser_url = property(_TradeApi.ConnRequest_ser_url_get, _TradeApi.ConnRequest_ser_url_set)
    ser_port = property(_TradeApi.ConnRequest_ser_port_get, _TradeApi.ConnRequest_ser_port_set)
    ser_pubkem = property(_TradeApi.ConnRequest_ser_pubkem_get, _TradeApi.ConnRequest_ser_pubkem_set)
    ser_aes = property(_TradeApi.ConnRequest_ser_aes_get, _TradeApi.ConnRequest_ser_aes_set)

    def __init__(self):
        _TradeApi.ConnRequest_swiginit(self, _TradeApi.new_ConnRequest())
    __swig_destroy__ = _TradeApi.delete_ConnRequest

# Register ConnRequest in _TradeApi:
_TradeApi.ConnRequest_swigregister(ConnRequest)

class LoginRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    user_id = property(_TradeApi.LoginRequest_user_id_get, _TradeApi.LoginRequest_user_id_set)
    user_type = property(_TradeApi.LoginRequest_user_type_get, _TradeApi.LoginRequest_user_type_set)
    user_passw = property(_TradeApi.LoginRequest_user_passw_get, _TradeApi.LoginRequest_user_passw_set)

    def __init__(self):
        _TradeApi.LoginRequest_swiginit(self, _TradeApi.new_LoginRequest())
    __swig_destroy__ = _TradeApi.delete_LoginRequest

# Register LoginRequest in _TradeApi:
_TradeApi.LoginRequest_swigregister(LoginRequest)

class MsgResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    is_success = property(_TradeApi.MsgResponse_is_success_get, _TradeApi.MsgResponse_is_success_set)
    id_msg = property(_TradeApi.MsgResponse_id_msg_get, _TradeApi.MsgResponse_id_msg_set)

    def __init__(self):
        _TradeApi.MsgResponse_swiginit(self, _TradeApi.new_MsgResponse())
    __swig_destroy__ = _TradeApi.delete_MsgResponse

# Register MsgResponse in _TradeApi:
_TradeApi.MsgResponse_swigregister(MsgResponse)

class LimitOrderRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    order_id = property(_TradeApi.LimitOrderRequest_order_id_get, _TradeApi.LimitOrderRequest_order_id_set)
    symbol = property(_TradeApi.LimitOrderRequest_symbol_get, _TradeApi.LimitOrderRequest_symbol_set)
    price = property(_TradeApi.LimitOrderRequest_price_get, _TradeApi.LimitOrderRequest_price_set)
    qty = property(_TradeApi.LimitOrderRequest_qty_get, _TradeApi.LimitOrderRequest_qty_set)
    side = property(_TradeApi.LimitOrderRequest_side_get, _TradeApi.LimitOrderRequest_side_set)
    exchange = property(_TradeApi.LimitOrderRequest_exchange_get, _TradeApi.LimitOrderRequest_exchange_set)

    def __init__(self):
        _TradeApi.LimitOrderRequest_swiginit(self, _TradeApi.new_LimitOrderRequest())
    __swig_destroy__ = _TradeApi.delete_LimitOrderRequest

# Register LimitOrderRequest in _TradeApi:
_TradeApi.LimitOrderRequest_swigregister(LimitOrderRequest)

class TradeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    order_id = property(_TradeApi.TradeInfo_order_id_get, _TradeApi.TradeInfo_order_id_set)
    timestamp = property(_TradeApi.TradeInfo_timestamp_get, _TradeApi.TradeInfo_timestamp_set)
    price = property(_TradeApi.TradeInfo_price_get, _TradeApi.TradeInfo_price_set)
    qty = property(_TradeApi.TradeInfo_qty_get, _TradeApi.TradeInfo_qty_set)
    deal_id = property(_TradeApi.TradeInfo_deal_id_get, _TradeApi.TradeInfo_deal_id_set)
    symbol = property(_TradeApi.TradeInfo_symbol_get, _TradeApi.TradeInfo_symbol_set)
    side = property(_TradeApi.TradeInfo_side_get, _TradeApi.TradeInfo_side_set)

    def __init__(self):
        _TradeApi.TradeInfo_swiginit(self, _TradeApi.new_TradeInfo())
    __swig_destroy__ = _TradeApi.delete_TradeInfo

# Register TradeInfo in _TradeApi:
_TradeApi.TradeInfo_swigregister(TradeInfo)

class OrderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    order_id = property(_TradeApi.OrderInfo_order_id_get, _TradeApi.OrderInfo_order_id_set)
    symbol = property(_TradeApi.OrderInfo_symbol_get, _TradeApi.OrderInfo_symbol_set)
    price = property(_TradeApi.OrderInfo_price_get, _TradeApi.OrderInfo_price_set)
    qty = property(_TradeApi.OrderInfo_qty_get, _TradeApi.OrderInfo_qty_set)
    side = property(_TradeApi.OrderInfo_side_get, _TradeApi.OrderInfo_side_set)
    exchange = property(_TradeApi.OrderInfo_exchange_get, _TradeApi.OrderInfo_exchange_set)
    filled_price = property(_TradeApi.OrderInfo_filled_price_get, _TradeApi.OrderInfo_filled_price_set)
    filled_qty = property(_TradeApi.OrderInfo_filled_qty_get, _TradeApi.OrderInfo_filled_qty_set)
    status = property(_TradeApi.OrderInfo_status_get, _TradeApi.OrderInfo_status_set)
    cxled_qty = property(_TradeApi.OrderInfo_cxled_qty_get, _TradeApi.OrderInfo_cxled_qty_set)
    ordertime = property(_TradeApi.OrderInfo_ordertime_get, _TradeApi.OrderInfo_ordertime_set)
    msgstr = property(_TradeApi.OrderInfo_msgstr_get, _TradeApi.OrderInfo_msgstr_set)
    broker_id = property(_TradeApi.OrderInfo_broker_id_get, _TradeApi.OrderInfo_broker_id_set)

    def __init__(self):
        _TradeApi.OrderInfo_swiginit(self, _TradeApi.new_OrderInfo())
    __swig_destroy__ = _TradeApi.delete_OrderInfo

# Register OrderInfo in _TradeApi:
_TradeApi.OrderInfo_swigregister(OrderInfo)

class PositionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    user_id = property(_TradeApi.PositionInfo_user_id_get, _TradeApi.PositionInfo_user_id_set)
    symbol = property(_TradeApi.PositionInfo_symbol_get, _TradeApi.PositionInfo_symbol_set)
    ref_cost = property(_TradeApi.PositionInfo_ref_cost_get, _TradeApi.PositionInfo_ref_cost_set)
    volume = property(_TradeApi.PositionInfo_volume_get, _TradeApi.PositionInfo_volume_set)
    avail_volume = property(_TradeApi.PositionInfo_avail_volume_get, _TradeApi.PositionInfo_avail_volume_set)

    def __init__(self):
        _TradeApi.PositionInfo_swiginit(self, _TradeApi.new_PositionInfo())
    __swig_destroy__ = _TradeApi.delete_PositionInfo

# Register PositionInfo in _TradeApi:
_TradeApi.PositionInfo_swigregister(PositionInfo)

class AssetInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    user_id = property(_TradeApi.AssetInfo_user_id_get, _TradeApi.AssetInfo_user_id_set)
    avail_amount = property(_TradeApi.AssetInfo_avail_amount_get, _TradeApi.AssetInfo_avail_amount_set)
    total_amount = property(_TradeApi.AssetInfo_total_amount_get, _TradeApi.AssetInfo_total_amount_set)

    def __init__(self):
        _TradeApi.AssetInfo_swiginit(self, _TradeApi.new_AssetInfo())
    __swig_destroy__ = _TradeApi.delete_AssetInfo

# Register AssetInfo in _TradeApi:
_TradeApi.AssetInfo_swigregister(AssetInfo)

class QuotationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    orderTime = property(_TradeApi.QuotationData_orderTime_get, _TradeApi.QuotationData_orderTime_set)
    stockCode = property(_TradeApi.QuotationData_stockCode_get, _TradeApi.QuotationData_stockCode_set)
    preClosePrice = property(_TradeApi.QuotationData_preClosePrice_get, _TradeApi.QuotationData_preClosePrice_set)
    openPrice = property(_TradeApi.QuotationData_openPrice_get, _TradeApi.QuotationData_openPrice_set)
    highPrice = property(_TradeApi.QuotationData_highPrice_get, _TradeApi.QuotationData_highPrice_set)
    lowPrice = property(_TradeApi.QuotationData_lowPrice_get, _TradeApi.QuotationData_lowPrice_set)
    lastPrice = property(_TradeApi.QuotationData_lastPrice_get, _TradeApi.QuotationData_lastPrice_set)
    closePrice = property(_TradeApi.QuotationData_closePrice_get, _TradeApi.QuotationData_closePrice_set)
    totalVolume = property(_TradeApi.QuotationData_totalVolume_get, _TradeApi.QuotationData_totalVolume_set)
    totalAmount = property(_TradeApi.QuotationData_totalAmount_get, _TradeApi.QuotationData_totalAmount_set)
    sellPrice01 = property(_TradeApi.QuotationData_sellPrice01_get, _TradeApi.QuotationData_sellPrice01_set)
    sellVolume01 = property(_TradeApi.QuotationData_sellVolume01_get, _TradeApi.QuotationData_sellVolume01_set)
    sellPrice02 = property(_TradeApi.QuotationData_sellPrice02_get, _TradeApi.QuotationData_sellPrice02_set)
    sellVolume02 = property(_TradeApi.QuotationData_sellVolume02_get, _TradeApi.QuotationData_sellVolume02_set)
    sellPrice03 = property(_TradeApi.QuotationData_sellPrice03_get, _TradeApi.QuotationData_sellPrice03_set)
    sellVolume03 = property(_TradeApi.QuotationData_sellVolume03_get, _TradeApi.QuotationData_sellVolume03_set)
    sellPrice04 = property(_TradeApi.QuotationData_sellPrice04_get, _TradeApi.QuotationData_sellPrice04_set)
    sellVolume04 = property(_TradeApi.QuotationData_sellVolume04_get, _TradeApi.QuotationData_sellVolume04_set)
    sellPrice05 = property(_TradeApi.QuotationData_sellPrice05_get, _TradeApi.QuotationData_sellPrice05_set)
    sellVolume05 = property(_TradeApi.QuotationData_sellVolume05_get, _TradeApi.QuotationData_sellVolume05_set)
    sellPrice06 = property(_TradeApi.QuotationData_sellPrice06_get, _TradeApi.QuotationData_sellPrice06_set)
    sellVolume06 = property(_TradeApi.QuotationData_sellVolume06_get, _TradeApi.QuotationData_sellVolume06_set)
    sellPrice07 = property(_TradeApi.QuotationData_sellPrice07_get, _TradeApi.QuotationData_sellPrice07_set)
    sellVolume07 = property(_TradeApi.QuotationData_sellVolume07_get, _TradeApi.QuotationData_sellVolume07_set)
    sellPrice08 = property(_TradeApi.QuotationData_sellPrice08_get, _TradeApi.QuotationData_sellPrice08_set)
    sellVolume08 = property(_TradeApi.QuotationData_sellVolume08_get, _TradeApi.QuotationData_sellVolume08_set)
    sellPrice09 = property(_TradeApi.QuotationData_sellPrice09_get, _TradeApi.QuotationData_sellPrice09_set)
    sellVolume09 = property(_TradeApi.QuotationData_sellVolume09_get, _TradeApi.QuotationData_sellVolume09_set)
    sellPrice10 = property(_TradeApi.QuotationData_sellPrice10_get, _TradeApi.QuotationData_sellPrice10_set)
    sellVolume10 = property(_TradeApi.QuotationData_sellVolume10_get, _TradeApi.QuotationData_sellVolume10_set)
    buyPrice01 = property(_TradeApi.QuotationData_buyPrice01_get, _TradeApi.QuotationData_buyPrice01_set)
    buyVolume01 = property(_TradeApi.QuotationData_buyVolume01_get, _TradeApi.QuotationData_buyVolume01_set)
    buyPrice02 = property(_TradeApi.QuotationData_buyPrice02_get, _TradeApi.QuotationData_buyPrice02_set)
    buyVolume02 = property(_TradeApi.QuotationData_buyVolume02_get, _TradeApi.QuotationData_buyVolume02_set)
    buyPrice03 = property(_TradeApi.QuotationData_buyPrice03_get, _TradeApi.QuotationData_buyPrice03_set)
    buyVolume03 = property(_TradeApi.QuotationData_buyVolume03_get, _TradeApi.QuotationData_buyVolume03_set)
    buyPrice04 = property(_TradeApi.QuotationData_buyPrice04_get, _TradeApi.QuotationData_buyPrice04_set)
    buyVolume04 = property(_TradeApi.QuotationData_buyVolume04_get, _TradeApi.QuotationData_buyVolume04_set)
    buyPrice05 = property(_TradeApi.QuotationData_buyPrice05_get, _TradeApi.QuotationData_buyPrice05_set)
    buyVolume05 = property(_TradeApi.QuotationData_buyVolume05_get, _TradeApi.QuotationData_buyVolume05_set)
    buyPrice06 = property(_TradeApi.QuotationData_buyPrice06_get, _TradeApi.QuotationData_buyPrice06_set)
    buyVolume06 = property(_TradeApi.QuotationData_buyVolume06_get, _TradeApi.QuotationData_buyVolume06_set)
    buyPrice07 = property(_TradeApi.QuotationData_buyPrice07_get, _TradeApi.QuotationData_buyPrice07_set)
    buyVolume07 = property(_TradeApi.QuotationData_buyVolume07_get, _TradeApi.QuotationData_buyVolume07_set)
    buyPrice08 = property(_TradeApi.QuotationData_buyPrice08_get, _TradeApi.QuotationData_buyPrice08_set)
    buyVolume08 = property(_TradeApi.QuotationData_buyVolume08_get, _TradeApi.QuotationData_buyVolume08_set)
    buyPrice09 = property(_TradeApi.QuotationData_buyPrice09_get, _TradeApi.QuotationData_buyPrice09_set)
    buyVolume09 = property(_TradeApi.QuotationData_buyVolume09_get, _TradeApi.QuotationData_buyVolume09_set)
    buyPrice10 = property(_TradeApi.QuotationData_buyPrice10_get, _TradeApi.QuotationData_buyPrice10_set)
    buyVolume10 = property(_TradeApi.QuotationData_buyVolume10_get, _TradeApi.QuotationData_buyVolume10_set)

    def __init__(self):
        _TradeApi.QuotationData_swiginit(self, _TradeApi.new_QuotationData())
    __swig_destroy__ = _TradeApi.delete_QuotationData

# Register QuotationData in _TradeApi:
_TradeApi.QuotationData_swigregister(QuotationData)

class QuotationDeal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stockCode = property(_TradeApi.QuotationDeal_stockCode_get, _TradeApi.QuotationDeal_stockCode_set)
    direction = property(_TradeApi.QuotationDeal_direction_get, _TradeApi.QuotationDeal_direction_set)
    recID = property(_TradeApi.QuotationDeal_recID_get, _TradeApi.QuotationDeal_recID_set)
    buyRecID = property(_TradeApi.QuotationDeal_buyRecID_get, _TradeApi.QuotationDeal_buyRecID_set)
    sellRecID = property(_TradeApi.QuotationDeal_sellRecID_get, _TradeApi.QuotationDeal_sellRecID_set)
    dealPrice = property(_TradeApi.QuotationDeal_dealPrice_get, _TradeApi.QuotationDeal_dealPrice_set)
    dealCount = property(_TradeApi.QuotationDeal_dealCount_get, _TradeApi.QuotationDeal_dealCount_set)
    tradeType = property(_TradeApi.QuotationDeal_tradeType_get, _TradeApi.QuotationDeal_tradeType_set)
    dealTime = property(_TradeApi.QuotationDeal_dealTime_get, _TradeApi.QuotationDeal_dealTime_set)
    exchangeCode = property(_TradeApi.QuotationDeal_exchangeCode_get, _TradeApi.QuotationDeal_exchangeCode_set)

    def __init__(self):
        _TradeApi.QuotationDeal_swiginit(self, _TradeApi.new_QuotationDeal())
    __swig_destroy__ = _TradeApi.delete_QuotationDeal

# Register QuotationDeal in _TradeApi:
_TradeApi.QuotationDeal_swigregister(QuotationDeal)

class QuotationOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stockCode = property(_TradeApi.QuotationOrder_stockCode_get, _TradeApi.QuotationOrder_stockCode_set)
    recID = property(_TradeApi.QuotationOrder_recID_get, _TradeApi.QuotationOrder_recID_set)
    orderPrice = property(_TradeApi.QuotationOrder_orderPrice_get, _TradeApi.QuotationOrder_orderPrice_set)
    orderVolume = property(_TradeApi.QuotationOrder_orderVolume_get, _TradeApi.QuotationOrder_orderVolume_set)
    orderCode = property(_TradeApi.QuotationOrder_orderCode_get, _TradeApi.QuotationOrder_orderCode_set)
    orderType = property(_TradeApi.QuotationOrder_orderType_get, _TradeApi.QuotationOrder_orderType_set)
    time = property(_TradeApi.QuotationOrder_time_get, _TradeApi.QuotationOrder_time_set)

    def __init__(self):
        _TradeApi.QuotationOrder_swiginit(self, _TradeApi.new_QuotationOrder())
    __swig_destroy__ = _TradeApi.delete_QuotationOrder

# Register QuotationOrder in _TradeApi:
_TradeApi.QuotationOrder_swigregister(QuotationOrder)

class StaticData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stockCode = property(_TradeApi.StaticData_stockCode_get, _TradeApi.StaticData_stockCode_set)
    stockName = property(_TradeApi.StaticData_stockName_get, _TradeApi.StaticData_stockName_set)
    preClosePrice = property(_TradeApi.StaticData_preClosePrice_get, _TradeApi.StaticData_preClosePrice_set)
    listingDate = property(_TradeApi.StaticData_listingDate_get, _TradeApi.StaticData_listingDate_set)
    staticDate = property(_TradeApi.StaticData_staticDate_get, _TradeApi.StaticData_staticDate_set)
    pinyin = property(_TradeApi.StaticData_pinyin_get, _TradeApi.StaticData_pinyin_set)
    priceUpLimit = property(_TradeApi.StaticData_priceUpLimit_get, _TradeApi.StaticData_priceUpLimit_set)
    priceDownLimit = property(_TradeApi.StaticData_priceDownLimit_get, _TradeApi.StaticData_priceDownLimit_set)

    def __init__(self):
        _TradeApi.StaticData_swiginit(self, _TradeApi.new_StaticData())
    __swig_destroy__ = _TradeApi.delete_StaticData

# Register StaticData in _TradeApi:
_TradeApi.StaticData_swigregister(StaticData)



